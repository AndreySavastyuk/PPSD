#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è admin
"""
import sys
import os
import bcrypt

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ sys.path
sys.path.insert(0, os.path.abspath('.'))

from database.connection import SessionLocal
from models.models import User

def fix_admin_password():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è admin"""
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è admin
        admin_user = db.query(User).filter(User.username == 'admin').first()
        
        if not admin_user:
            print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å admin –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å admin –Ω–∞–π–¥–µ–Ω: {admin_user.full_name}")
        print(f"üìù –¢–µ–∫—É—â–∏–π hash: {admin_user.password_hash[:50]}...")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π hash –¥–ª—è –ø–∞—Ä–æ–ª—è 'admin'
        new_password = 'admin'
        new_hash = bcrypt.hashpw(new_password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
        
        print(f"üîß –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π hash –¥–ª—è –ø–∞—Ä–æ–ª—è '{new_password}': {new_hash}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π hash
        verification = bcrypt.checkpw(new_password.encode('utf-8'), new_hash.encode('utf-8'))
        print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ hash: {'–£—Å–ø–µ—Ö' if verification else '–û—à–∏–±–∫–∞'}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        admin_user.password_hash = new_hash
        db.commit()
        
        print(f"üíæ –ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è admin —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥
        from utils.auth import authenticate_user
        test_user = authenticate_user(db, 'admin', 'admin')
        print(f"üîê –¢–µ—Å—Ç –≤—Ö–æ–¥–∞ admin/admin: {'‚úÖ –£—Å–ø–µ—Ö' if test_user else '‚ùå –ù–µ—É–¥–∞—á–∞'}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–∫–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—Å–µ—Ö —Ä–æ–ª–µ–π, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        print(f"\nüë• –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—Å–µ—Ö —Ä–æ–ª–µ–π...")
        
        roles_to_create = [
            {'username': 'warehouse', 'password': 'warehouse', 'full_name': '–ö–ª–∞–¥–æ–≤—â–∏–∫', 'role': 'warehouse'},
            {'username': 'qc', 'password': 'qc', 'full_name': '–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –û–¢–ö', 'role': 'qc'},
            {'username': 'lab', 'password': 'lab', 'full_name': '–ò–Ω–∂–µ–Ω–µ—Ä –¶–ó–õ', 'role': 'lab'},
            {'username': 'production', 'password': 'production', 'full_name': '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ', 'role': 'production'}
        ]
        
        for user_data in roles_to_create:
            existing_user = db.query(User).filter(User.username == user_data['username']).first()
            if not existing_user:
                password_hash = bcrypt.hashpw(user_data['password'].encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
                new_user = User(
                    username=user_data['username'],
                    password_hash=password_hash,
                    full_name=user_data['full_name'],
                    role=user_data['role'],
                    can_edit=True,
                    can_view=True,
                    is_active=True
                )
                db.add(new_user)
                print(f"‚ûï –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['username']}")
            else:
                print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['username']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        db.commit()
        print(f"\nüéâ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≥–æ—Ç–æ–≤—ã!")
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        all_users = db.query(User).all()
        print(f"\nüìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: {len(all_users)}")
        for user in all_users:
            print(f"   - {user.username} ({user.role}) - {user.full_name}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        db.rollback()
    finally:
        db.close()

if __name__ == "__main__":
    fix_admin_password() 