#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –≤–µ–±-—Å–µ—Ä–≤–∏—Å–æ–≤ —Å–∏—Å—Ç–µ–º—ã –ü–ü–°–î
"""

import os
import sys
import time
import signal
import subprocess
import threading
from datetime import datetime

def print_banner():
    """–ü–µ—á–∞—Ç—å –±–∞–Ω–Ω–µ—Ä–∞"""
    print("=" * 60)
    print("üè≠ –°–ò–°–¢–ï–ú–ê –ü–†–û–í–ï–†–ö–ò –°–ï–†–¢–ò–§–ò–ö–ê–¢–ù–´–• –î–ê–ù–ù–´–• (–ü–ü–°–î)")
    print("üöÄ –ó–ê–ü–£–°–ö –í–ï–ë-–°–ï–†–í–ò–°–û–í")
    print("=" * 60)
    print(f"üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}")
    print()

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    required_packages = [
        'fastapi',
        'uvicorn',
        'flask',
        'flask-cors',
        'pandas',
        'requests',
        'python-telegram-bot'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package.replace('-', '_'))
            print(f"  ‚úÖ {package}")
        except ImportError:
            print(f"  ‚ùå {package} - –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù")
            missing_packages.append(package)
    
    if missing_packages:
        print(f"\n‚ö†Ô∏è  –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–∫–µ—Ç—ã:")
        print(f"pip install {' '.join(missing_packages)}")
        return False
    
    print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    return True

def start_service(name, command, cwd=None):
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞"""
    print(f"üöÄ –ó–∞–ø—É—Å–∫ {name}...")
    try:
        process = subprocess.Popen(
            command,
            shell=True,
            cwd=cwd,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            universal_newlines=True
        )
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø—É—Å–∫–∞
        time.sleep(2)
        
        if process.poll() is None:
            print(f"  ‚úÖ {name} –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
            return process
        else:
            stdout, stderr = process.communicate()
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {name}")
            print(f"     STDOUT: {stdout}")
            print(f"     STDERR: {stderr}")
            return None
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {name}: {e}")
        return None

def monitor_service(name, process):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        while True:
            output = process.stdout.readline()
            if output == '' and process.poll() is not None:
                break
            if output:
                print(f"[{name}] {output.strip()}")
    except:
        pass

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print_banner()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not check_dependencies():
        sys.exit(1)
    
    print()
    
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    processes = {}
    monitor_threads = []
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    os.environ['PYTHONPATH'] = os.getcwd()
    
    # –°–µ—Ä–≤–∏—Å—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞
    services = [
        {
            'name': '–û—Å–Ω–æ–≤–Ω–æ–π API (FastAPI)',
            'command': 'python -m uvicorn api:app --reload --host 0.0.0.0 --port 8000',
            'port': 8000,
            'url': 'http://localhost:8000'
        },
        {
            'name': '–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π API',
            'command': 'python web-app/backend/analytics_api.py',
            'port': 8001,
            'url': 'http://localhost:8001'
        },
        {
            'name': '–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (Flask)',
            'command': 'python web-app/backend/web_server.py',
            'port': 5000,
            'url': 'http://localhost:5000'
        }
    ]
    
    print("üéØ –ü–õ–ê–ù –ó–ê–ü–£–°–ö–ê:")
    for service in services:
        print(f"  ‚Ä¢ {service['name']} - {service['url']}")
    print()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
    for service in services:
        process = start_service(service['name'], service['command'])
        if process:
            processes[service['name']] = process
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            monitor_thread = threading.Thread(
                target=monitor_service,
                args=(service['name'], process),
                daemon=True
            )
            monitor_thread.start()
            monitor_threads.append(monitor_thread)
        
        time.sleep(1)
    
    print()
    print("üåê –í–ï–ë-–°–ï–†–í–ò–°–´ –ó–ê–ü–£–©–ï–ù–´:")
    print("-" * 40)
    for service in services:
        if service['name'] in processes:
            print(f"‚úÖ {service['name']}")
            print(f"   üîó {service['url']}")
            if 'docs' in service.get('features', []):
                print(f"   üìö {service['url']}/docs")
        else:
            print(f"‚ùå {service['name']} - –ù–ï –ó–ê–ü–£–©–ï–ù")
    
    print()
    print("üìã –ü–û–õ–ï–ó–ù–´–ï –°–°–´–õ–ö–ò:")
    print("   üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞:        http://localhost:5000")
    print("   üìä –î–∞—à–±–æ—Ä–¥ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:       http://localhost:5000/dashboard")
    print("   üîß API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:        http://localhost:8000/docs")
    print("   üìà –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π API:       http://localhost:8001/docs")
    
    print()
    print("üí° –ö–û–ú–ê–ù–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø:")
    print("   Ctrl+C - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã")
    print("   docker-compose up - –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Docker")
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞
    telegram_token = os.getenv('TELEGRAM_BOT_TOKEN')
    if telegram_token:
        print("\nü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        bot_process = start_service(
            'Telegram Bot',
            'python web-app/backend/notifications.py'
        )
        if bot_process:
            processes['Telegram Bot'] = bot_process
    else:
        print("\n‚ö†Ô∏è  TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. Telegram –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω.")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω: export TELEGRAM_BOT_TOKEN=your_token")
    
    print()
    print("üéâ –í–°–ï –°–ï–†–í–ò–°–´ –ì–û–¢–û–í–´ –ö –†–ê–ë–û–¢–ï!")
    print("üîç –õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –Ω–∏–∂–µ...")
    print("=" * 60)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    def signal_handler(sig, frame):
        print("\n\nüõë –û–°–¢–ê–ù–û–í–ö–ê –°–ï–†–í–ò–°–û–í...")
        for name, process in processes.items():
            try:
                print(f"   ‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ {name}...")
                process.terminate()
                time.sleep(1)
                if process.poll() is None:
                    process.kill()
            except:
                pass
        print("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        sys.exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    try:
        while True:
            time.sleep(1)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –µ—â–µ —Ä–∞–±–æ—Ç–∞—é—Ç
            for name, process in list(processes.items()):
                if process.poll() is not None:
                    print(f"‚ö†Ô∏è  –ü—Ä–æ—Ü–µ—Å—Å {name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ")
                    del processes[name]
            
            if not processes:
                print("‚ùå –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å")
                break
                
    except KeyboardInterrupt:
        signal_handler(signal.SIGINT, None)

if __name__ == '__main__':
    main() 