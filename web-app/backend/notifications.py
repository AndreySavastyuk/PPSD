#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ü–ü–°–î
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Email, Telegram –∏ –≤–µ–± push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
"""

import os
import sys
import smtplib
import logging
from datetime import datetime
from typing import List, Dict, Optional
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders

import telegram
from telegram.ext import Application, CommandHandler, MessageHandler, filters
import asyncio
import json

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.join(os.path.dirname(__file__), '../..'))

from database.connection import SessionLocal
from models.models import MaterialEntry, User, UserRole, MaterialStatus

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class NotificationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self):
        self.email_config = {
            'smtp_server': os.getenv('SMTP_SERVER', 'localhost'),
            'smtp_port': int(os.getenv('SMTP_PORT', '587')),
            'username': os.getenv('SMTP_USERNAME', ''),
            'password': os.getenv('SMTP_PASSWORD', ''),
            'from_email': os.getenv('FROM_EMAIL', 'noreply@ppsd.local')
        }
        
        self.telegram_token = os.getenv('TELEGRAM_BOT_TOKEN', '')
        self.telegram_bot = None
        
        if self.telegram_token:
            self.init_telegram_bot()
    
    def init_telegram_bot(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞"""
        try:
            self.telegram_bot = telegram.Bot(token=self.telegram_token)
            logger.info("Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞: {e}")
    
    async def send_email(self, to_email: str, subject: str, body: str, attachments: List[str] = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            msg = MIMEMultipart()
            msg['From'] = self.email_config['from_email']
            msg['To'] = to_email
            msg['Subject'] = subject
            
            msg.attach(MIMEText(body, 'html'))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–ª–æ–∂–µ–Ω–∏—è
            if attachments:
                for file_path in attachments:
                    if os.path.isfile(file_path):
                        with open(file_path, 'rb') as attachment:
                            part = MIMEBase('application', 'octet-stream')
                            part.set_payload(attachment.read())
                            
                        encoders.encode_base64(part)
                        part.add_header(
                            'Content-Disposition',
                            f'attachment; filename= {os.path.basename(file_path)}'
                        )
                        msg.attach(part)
            
            server = smtplib.SMTP(self.email_config['smtp_server'], self.email_config['smtp_port'])
            server.starttls()
            server.login(self.email_config['username'], self.email_config['password'])
            server.send_message(msg)
            server.quit()
            
            logger.info(f"Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {to_email}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")
            return False
    
    async def send_telegram_message(self, chat_id: str, message: str, parse_mode: str = 'HTML'):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        if not self.telegram_bot:
            logger.warning("Telegram –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
        
        try:
            await self.telegram_bot.send_message(
                chat_id=chat_id,
                text=message,
                parse_mode=parse_mode
            )
            logger.info(f"Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    def send_web_push(self, user_id: int, title: str, body: str, data: Dict = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ web push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)"""
        logger.info(f"Web push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {title}")
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å –ø–æ–º–æ—â—å—é WebPush API
        return True
    
    async def notify_material_status_change(self, material_id: int, old_status: str, new_status: str, user_id: int):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
        db = SessionLocal()
        try:
            material = db.query(MaterialEntry).filter(MaterialEntry.id == material_id).first()
            if not material:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            users_to_notify = self.get_users_for_status_notification(db, old_status, new_status)
            
            subject = f"–ü–ü–°–î: –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ #{material_id}"
            
            message = self.create_status_change_message(material, old_status, new_status)
            
            for user in users_to_notify:
                if user.email:
                    await self.send_email(user.email, subject, message)
                
                if user.telegram_chat_id:
                    telegram_message = self.create_telegram_status_message(material, old_status, new_status)
                    await self.send_telegram_message(user.telegram_chat_id, telegram_message)
                
                # Web push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                self.send_web_push(
                    user.id,
                    f"–°—Ç–∞—Ç—É—Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∏–∑–º–µ–Ω–µ–Ω",
                    f"–ú–∞—Ç–µ—Ä–∏–∞–ª #{material_id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å: {self.get_status_display_name(new_status)}",
                    {'material_id': material_id, 'status': new_status}
                )
        
        finally:
            db.close()
    
    async def notify_new_material(self, material_id: int):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –º–∞—Ç–µ—Ä–∏–∞–ª–µ"""
        db = SessionLocal()
        try:
            material = db.query(MaterialEntry).filter(MaterialEntry.id == material_id).first()
            if not material:
                return
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –û–¢–ö –æ –Ω–æ–≤–æ–º –º–∞—Ç–µ—Ä–∏–∞–ª–µ
            qc_users = db.query(User).filter(User.role == UserRole.QC.value).all()
            
            subject = f"–ü–ü–°–î: –ù–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ #{material_id}"
            
            for user in qc_users:
                message = self.create_new_material_message(material)
                
                if user.email:
                    await self.send_email(user.email, subject, message)
                
                if user.telegram_chat_id:
                    telegram_message = self.create_telegram_new_material_message(material)
                    await self.send_telegram_message(user.telegram_chat_id, telegram_message)
        
        finally:
            db.close()
    
    async def notify_critical_event(self, event_type: str, message: str, affected_material_id: int = None):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º —Å–æ–±—ã—Ç–∏–∏"""
        db = SessionLocal()
        try:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            admins = db.query(User).filter(User.role == UserRole.ADMIN.value).all()
            
            subject = f"–ü–ü–°–î: –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –°–û–ë–´–¢–ò–ï - {event_type}"
            
            for admin in admins:
                if admin.email:
                    email_message = self.create_critical_event_message(event_type, message, affected_material_id)
                    await self.send_email(admin.email, subject, email_message)
                
                if admin.telegram_chat_id:
                    telegram_message = f"üö® <b>–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –°–û–ë–´–¢–ò–ï</b>\n\n" \
                                     f"<b>–¢–∏–ø:</b> {event_type}\n" \
                                     f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {message}\n" \
                                     f"<b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
                    
                    if affected_material_id:
                        telegram_message += f"\n<b>–ú–∞—Ç–µ—Ä–∏–∞–ª:</b> #{affected_material_id}"
                    
                    await self.send_telegram_message(admin.telegram_chat_id, telegram_message)
        
        finally:
            db.close()
    
    def get_users_for_status_notification(self, db, old_status: str, new_status: str) -> List[User]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞"""
        users = []
        
        # –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–≥–æ —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        if new_status == MaterialStatus.QC_CHECK_PENDING.value:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –û–¢–ö
            users.extend(db.query(User).filter(User.role == UserRole.QC.value).all())
        
        elif new_status == MaterialStatus.LAB_CHECK_PENDING.value:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é
            users.extend(db.query(User).filter(User.role == UserRole.LAB.value).all())
        
        elif new_status in [MaterialStatus.APPROVED.value, MaterialStatus.REJECTED.value]:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–∫–ª–∞–¥ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
            users.extend(db.query(User).filter(
                User.role.in_([UserRole.WAREHOUSE.value, UserRole.PRODUCTION.value])
            ).all())
        
        return users
    
    def create_status_change_message(self, material: MaterialEntry, old_status: str, new_status: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è email"""
        return f"""
        <html>
        <body>
            <h2>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞</h2>
            <table border="1" cellpadding="5" cellspacing="0">
                <tr><td><b>ID –º–∞—Ç–µ—Ä–∏–∞–ª–∞:</b></td><td>#{material.id}</td></tr>
                <tr><td><b>–ú–∞—Ä–∫–∞:</b></td><td>{material.material_grade}</td></tr>
                <tr><td><b>–ü–ª–∞–≤–∫–∞:</b></td><td>{material.melt_number}</td></tr>
                <tr><td><b>–°—Ç–∞—Ä—ã–π —Å—Ç–∞—Ç—É—Å:</b></td><td>{self.get_status_display_name(old_status)}</td></tr>
                <tr><td><b>–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:</b></td><td>{self.get_status_display_name(new_status)}</td></tr>
                <tr><td><b>–í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:</b></td><td>{datetime.now().strftime('%d.%m.%Y %H:%M:%S')}</td></tr>
            </table>
            
            <p><a href="http://localhost:5000">–ü–µ—Ä–µ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –ü–ü–°–î</a></p>
        </body>
        </html>
        """
    
    def create_telegram_status_message(self, material: MaterialEntry, old_status: str, new_status: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è Telegram"""
        return f"""
üìã <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞</b>

üî¢ <b>ID:</b> #{material.id}
‚ö° <b>–ú–∞—Ä–∫–∞:</b> {material.material_grade}
üî• <b>–ü–ª–∞–≤–∫–∞:</b> {material.melt_number}

üìä <b>–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω:</b>
‚Ä¢ –ë—ã–ª–æ: {self.get_status_display_name(old_status)}
‚Ä¢ –°—Ç–∞–ª–æ: {self.get_status_display_name(new_status)}

üïí <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
        """
    
    def create_new_material_message(self, material: MaterialEntry) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –º–∞—Ç–µ—Ä–∏–∞–ª–µ –¥–ª—è email"""
        return f"""
        <html>
        <body>
            <h2>–ù–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏</h2>
            <table border="1" cellpadding="5" cellspacing="0">
                <tr><td><b>ID –º–∞—Ç–µ—Ä–∏–∞–ª–∞:</b></td><td>#{material.id}</td></tr>
                <tr><td><b>–ú–∞—Ä–∫–∞:</b></td><td>{material.material_grade}</td></tr>
                <tr><td><b>–¢–∏–ø:</b></td><td>{material.material_type}</td></tr>
                <tr><td><b>–ü–ª–∞–≤–∫–∞:</b></td><td>{material.melt_number}</td></tr>
                <tr><td><b>–ü–∞—Ä—Ç–∏—è:</b></td><td>{material.batch_number or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</td></tr>
                <tr><td><b>–î–∞—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è:</b></td><td>{material.created_at.strftime('%d.%m.%Y %H:%M:%S')}</td></tr>
            </table>
            
            <p><b>–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –û–¢–ö</b></p>
            <p><a href="http://localhost:5000">–ü–µ—Ä–µ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –ü–ü–°–î</a></p>
        </body>
        </html>
        """
    
    def create_telegram_new_material_message(self, material: MaterialEntry) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –º–∞—Ç–µ—Ä–∏–∞–ª–µ –¥–ª—è Telegram"""
        return f"""
üÜï <b>–ù–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏</b>

üî¢ <b>ID:</b> #{material.id}
‚ö° <b>–ú–∞—Ä–∫–∞:</b> {material.material_grade}
üì¶ <b>–¢–∏–ø:</b> {material.material_type}
üî• <b>–ü–ª–∞–≤–∫–∞:</b> {material.melt_number}
üìã <b>–ü–∞—Ä—Ç–∏—è:</b> {material.batch_number or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}

‚è∞ <b>–ü–æ—Å—Ç—É–ø–∏–ª:</b> {material.created_at.strftime('%d.%m.%Y %H:%M:%S')}

‚úÖ <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –û–¢–ö</b>
        """
    
    def create_critical_event_message(self, event_type: str, message: str, material_id: int = None) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º —Å–æ–±—ã—Ç–∏–∏ –¥–ª—è email"""
        material_info = ""
        if material_id:
            material_info = f"<tr><td><b>–ó–∞—Ç—Ä–æ–Ω—É—Ç—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª:</b></td><td>#{material_id}</td></tr>"
        
        return f"""
        <html>
        <body>
            <h2 style="color: red;">–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –°–û–ë–´–¢–ò–ï</h2>
            <table border="1" cellpadding="5" cellspacing="0">
                <tr><td><b>–¢–∏–ø —Å–æ–±—ã—Ç–∏—è:</b></td><td>{event_type}</td></tr>
                <tr><td><b>–û–ø–∏—Å–∞–Ω–∏–µ:</b></td><td>{message}</td></tr>
                {material_info}
                <tr><td><b>–í—Ä–µ–º—è:</b></td><td>{datetime.now().strftime('%d.%m.%Y %H:%M:%S')}</td></tr>
            </table>
            
            <p><b>–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ!</b></p>
            <p><a href="http://localhost:5000">–ü–µ—Ä–µ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –ü–ü–°–î</a></p>
        </body>
        </html>
        """
    
    def get_status_display_name(self, status_code: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ —Å—Ç–∞—Ç—É—Å–∞"""
        status_names = {
            MaterialStatus.RECEIVED.value: "–ü–æ–ª—É—á–µ–Ω –Ω–∞ —Å–∫–ª–∞–¥",
            MaterialStatus.QC_CHECK_PENDING.value: "–û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –û–¢–ö",
            MaterialStatus.QC_CHECKED.value: "–ü—Ä–æ–≤–µ—Ä–µ–Ω –û–¢–ö",
            MaterialStatus.LAB_CHECK_PENDING.value: "–û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –¶–ó–õ",
            MaterialStatus.SAMPLES_REQUESTED.value: "–ó–∞–ø—Ä–æ—à–µ–Ω—ã –ø—Ä–æ–±—ã",
            MaterialStatus.SAMPLES_COLLECTED.value: "–ü—Ä–æ–±—ã –æ—Ç–æ–±—Ä–∞–Ω—ã",
            MaterialStatus.TESTING.value: "–ù–∞ –∏—Å–ø—ã—Ç–∞–Ω–∏—è—Ö",
            MaterialStatus.TESTING_COMPLETED.value: "–ò—Å–ø—ã—Ç–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã",
            MaterialStatus.APPROVED.value: "–û–¥–æ–±—Ä–µ–Ω",
            MaterialStatus.REJECTED.value: "–û—Ç–∫–ª–æ–Ω–µ–Ω",
            MaterialStatus.ARCHIVED.value: "–í –∞—Ä—Ö–∏–≤–µ",
            MaterialStatus.EDIT_REQUESTED.value: "–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
        }
        return status_names.get(status_code, status_code)

# Singleton instance
notification_manager = NotificationManager()

class TelegramBotHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞"""
    
    def __init__(self, notification_manager: NotificationManager):
        self.nm = notification_manager
        self.user_chats = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤—è–∑–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —á–∞—Ç–∞–º–∏
        
    async def start_command(self, update, context):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        chat_id = update.effective_chat.id
        message = """
üè≠ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ü–ü–°–î!</b>

–≠—Ç–æ—Ç –±–æ—Ç —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö –≤ —Å–∏—Å—Ç–µ–º–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/status - –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
/help - –ü–æ–º–æ—â—å

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã –¥–ª—è —Å–≤—è–∑–∫–∏ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å —ç—Ç–∏–º —á–∞—Ç–æ–º.
        """
        await context.bot.send_message(chat_id=chat_id, text=message, parse_mode='HTML')
    
    async def status_command(self, update, context):
        """–ö–æ–º–∞–Ω–¥–∞ /status"""
        chat_id = update.effective_chat.id
        
        db = SessionLocal()
        try:
            total_materials = db.query(MaterialEntry).filter(MaterialEntry.is_deleted == False).count()
            pending_qc = db.query(MaterialEntry).filter(
                MaterialEntry.status == MaterialStatus.QC_CHECK_PENDING.value,
                MaterialEntry.is_deleted == False
            ).count()
            
            message = f"""
üìä <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –ü–ü–°–î</b>

üì¶ <b>–í—Å–µ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:</b> {total_materials}
‚è≥ <b>–û–∂–∏–¥–∞—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –û–¢–ö:</b> {pending_qc}
üïí <b>–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}

‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —à—Ç–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ
            """
            
        except Exception as e:
            message = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}"
        
        finally:
            db.close()
        
        await context.bot.send_message(chat_id=chat_id, text=message, parse_mode='HTML')
    
    async def help_command(self, update, context):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        chat_id = update.effective_chat.id
        message = """
üÜò <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É –ü–ü–°–î</b>

<b>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:</b>
–ë–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö –≤ —Å–∏—Å—Ç–µ–º–µ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.

<b>–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</b>
‚Ä¢ üì¶ –ù–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
‚Ä¢ üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
‚Ä¢ üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è
‚Ä¢ ‚ö†Ô∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è

<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</b>
–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã. –û–Ω —Å–≤—è–∂–µ—Ç –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –ü–ü–°–î —Å —ç—Ç–∏–º Telegram —á–∞—Ç–æ–º.

<b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ IT-–æ—Ç–¥–µ–ª.
        """
        await context.bot.send_message(chat_id=chat_id, text=message, parse_mode='HTML')

def run_telegram_bot():
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    if not token:
        logger.warning("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. Telegram –±–æ—Ç –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω.")
        return
    
    application = Application.builder().token(token).build()
    handler = TelegramBotHandler(notification_manager)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", handler.start_command))
    application.add_handler(CommandHandler("status", handler.status_command))
    application.add_handler(CommandHandler("help", handler.help_command))
    
    logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    application.run_polling()

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞
    run_telegram_bot() 