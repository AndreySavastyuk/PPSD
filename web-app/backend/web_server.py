#!/usr/bin/env python3
"""
Flask –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ü–ü–°–î
–û–±—Å–ª—É–∂–∏–≤–∞–µ—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ –ø—Ä–æ–∫—Å–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∫ API
"""

import os
import sys
from flask import Flask, render_template, send_from_directory, jsonify, request, redirect, url_for
from flask_cors import CORS
import requests
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.join(os.path.dirname(__file__), '../..'))

app = Flask(__name__, 
           template_folder='../templates',
           static_folder='../static')
CORS(app)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE_URL = 'http://localhost:8000'
WEB_PORT = 5000

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    return render_template('index.html')

@app.route('/api/<path:endpoint>')
def proxy_api(endpoint):
    """–ü—Ä–æ–∫—Å–∏ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è API
        api_url = f"{API_BASE_URL}/{endpoint}"
        
        # –ü–µ—Ä–µ–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        params = request.args.to_dict()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
        if request.method == 'GET':
            response = requests.get(api_url, params=params)
        elif request.method == 'POST':
            response = requests.post(api_url, json=request.json, params=params)
        elif request.method == 'PUT':
            response = requests.put(api_url, json=request.json, params=params)
        elif request.method == 'DELETE':
            response = requests.delete(api_url, params=params)
        else:
            return jsonify({'error': 'Method not allowed'}), 405
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç API
        return response.json(), response.status_code
        
    except requests.exceptions.ConnectionError:
        return jsonify({
            'error': 'API server is not available',
            'message': '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8000'
        }), 503
    except Exception as e:
        return jsonify({
            'error': 'Proxy error',
            'message': str(e)
        }), 500

@app.route('/health')
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
        api_response = requests.get(f"{API_BASE_URL}/", timeout=5)
        api_status = "OK" if api_response.status_code == 200 else "ERROR"
    except:
        api_status = "UNAVAILABLE"
    
    return jsonify({
        'status': 'OK',
        'timestamp': datetime.now().isoformat(),
        'web_server': 'OK',
        'api_server': api_status,
        'version': '1.0.0'
    })

@app.route('/about')
def about():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
    return render_template('about.html')

@app.route('/login')
def login():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ (–∑–∞–≥–ª—É—à–∫–∞)"""
    return render_template('login.html')

@app.errorhandler(404)
def not_found(error):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ 404 –æ—à–∏–±–∫–∏"""
    return render_template('404.html'), 404

@app.errorhandler(500)
def internal_error(error):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ 500 –æ—à–∏–±–∫–∏"""
    return render_template('500.html'), 500

def check_api_server():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        response = requests.get(f"{API_BASE_URL}/", timeout=5)
        return response.status_code == 200
    except:
        return False

if __name__ == '__main__':
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –ü–ü–°–î –Ω–∞ –ø–æ—Ä—Ç—É {WEB_PORT}")
    print(f"üîó –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:{WEB_PORT}")
    print(f"üåê API: {API_BASE_URL}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
    if check_api_server():
        print("‚úÖ API —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
    else:
        print("‚ö†Ô∏è  API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π: uvicorn api:app --reload")
    
    print("-" * 50)
    
    app.run(
        host='0.0.0.0',
        port=WEB_PORT,
        debug=True,
        threaded=True
    ) 