#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ PyQt5 ‚Üí PySide6
"""

import os
import re
import sys
from pathlib import Path

def find_python_files(base_path):
    """–ò—â–µ—Ç –≤—Å–µ Python —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    found_files = []
    for root, dirs, files in os.walk(base_path):
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º venv –∏ .git –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if "venv" in root or ".git" in root:
            continue
        for file in files:
            if file.endswith(".py"):
                found_files.append(os.path.join(root, file))
    return found_files

def update_import_statements(file_path):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–º–ø–æ—Ä—Ç—ã PyQt5 –Ω–∞ PySide6"""
    with open(file_path, 'r', encoding='utf-8') as file:
        content = file.read()
    
    # –ó–∞–º–µ–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
    updated_content = re.sub(r'from PyQt5\.([a-zA-Z.]+) import (.+)', 
                             r'from PySide6.\1 import \2', content)
    updated_content = re.sub(r'import PyQt5\.([a-zA-Z.]+)', 
                             r'import PySide6.\1', updated_content)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ —Å–¥–µ–ª–∞–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if content != updated_content:
        with open(file_path, 'w', encoding='utf-8') as file:
            file.write(updated_content)
        return True
    return False

def update_constants(file_path):
    """–û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã Qt –¥–ª—è Qt6"""
    with open(file_path, 'r', encoding='utf-8') as file:
        content = file.read()
    
    # –°–ª–æ–≤–∞—Ä—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π
    replacements = {
        # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ
        r'Qt\.AlignCenter': 'Qt.AlignmentFlag.AlignCenter',
        r'Qt\.AlignLeft': 'Qt.AlignmentFlag.AlignLeft',
        r'Qt\.AlignRight': 'Qt.AlignmentFlag.AlignRight',
        r'Qt\.AlignTop': 'Qt.AlignmentFlag.AlignTop',
        r'Qt\.AlignBottom': 'Qt.AlignmentFlag.AlignBottom',
        r'Qt\.AlignVCenter': 'Qt.AlignmentFlag.AlignVCenter',
        r'Qt\.AlignHCenter': 'Qt.AlignmentFlag.AlignHCenter',
        
        # –¶–≤–µ—Ç–∞
        r'Qt\.transparent': 'Qt.GlobalColor.transparent',
        r'Qt\.black': 'Qt.GlobalColor.black',
        r'Qt\.white': 'Qt.GlobalColor.white',
        r'Qt\.red': 'Qt.GlobalColor.red',
        r'Qt\.green': 'Qt.GlobalColor.green',
        r'Qt\.blue': 'Qt.GlobalColor.blue',
        
        # –§–ª–∞–≥–∏ –æ–∫–æ–Ω
        r'Qt\.WindowStaysOnTopHint': 'Qt.WindowType.WindowStaysOnTopHint',
        r'Qt\.WindowCloseButtonHint': 'Qt.WindowType.WindowCloseButtonHint',
        r'Qt\.Dialog': 'Qt.WindowType.Dialog',
        
        # –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è
        r'Qt\.Horizontal': 'Qt.Orientation.Horizontal',
        r'Qt\.Vertical': 'Qt.Orientation.Vertical',
        
        # QFrame
        r'QFrame\.HLine': 'QFrame.Shape.HLine',
        r'QFrame\.VLine': 'QFrame.Shape.VLine',
        r'QFrame\.Sunken': 'QFrame.Shadow.Sunken',
        r'QFrame\.Raised': 'QFrame.Shadow.Raised',
        
        # QPainter
        r'QPainter\.Antialiasing': 'QPainter.RenderHint.Antialiasing',
        
        # QFont
        r'QFont\.Bold': 'QFont.Weight.Bold',
        r'QFont\.Normal': 'QFont.Weight.Normal',
        
        # QMessageBox
        r'QMessageBox\.Yes': 'QMessageBox.StandardButton.Yes',
        r'QMessageBox\.No': 'QMessageBox.StandardButton.No',
        r'QMessageBox\.Ok': 'QMessageBox.StandardButton.Ok',
        r'QMessageBox\.Cancel': 'QMessageBox.StandardButton.Cancel',
        r'QMessageBox\.Question': 'QMessageBox.Icon.Question',
        r'QMessageBox\.Information': 'QMessageBox.Icon.Information',
        r'QMessageBox\.Warning': 'QMessageBox.Icon.Warning',
        r'QMessageBox\.Critical': 'QMessageBox.Icon.Critical',
    }
    
    updated_content = content
    for old, new in replacements.items():
        updated_content = re.sub(old, new, updated_content)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ —Å–¥–µ–ª–∞–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if content != updated_content:
        with open(file_path, 'w', encoding='utf-8') as file:
            file.write(updated_content)
        return True
    return False

def update_exec_to_exec_(file_path):
    """–ó–∞–º–µ–Ω—è–µ—Ç app.exec() –Ω–∞ app.exec() –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    with open(file_path, 'r', encoding='utf-8') as file:
        content = file.read()
    
    # –ò—â–µ–º –≤—ã–∑–æ–≤—ã app.exec() –∏ –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ app.exec()
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏—â–µ–º –∏ –∑–∞–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥ exec_()
    updated_content = re.sub(r'app\.exec_\(\)', 'app.exec()', content)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ —Å–¥–µ–ª–∞–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if content != updated_content:
        with open(file_path, 'w', encoding='utf-8') as file:
            file.write(updated_content)
        return True
    return False

def migrate_requirements():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç requirements.txt"""
    if os.path.exists('requirements.txt'):
        with open('requirements.txt', 'r', encoding='utf-8') as file:
            content = file.read()
        
        # –ó–∞–º–µ–Ω—è–µ–º PyQt5 –Ω–∞ PySide6
        if 'PyQt5' in content:
            # –ù–∞—Ö–æ–¥–∏–º –≤–µ—Ä—Å–∏—é PyQt5
            pyqt_match = re.search(r'PyQt5==([0-9.]+)', content)
            if pyqt_match:
                version = pyqt_match.group(1)
                print(f"–ù–∞–π–¥–µ–Ω–∞ –≤–µ—Ä—Å–∏—è PyQt5: {version}")
                print("–ó–∞–º–µ–Ω—è–µ–º –Ω–∞ PySide6==6.5.2")
                content = content.replace(f'PyQt5=={version}', 'PySide6==6.5.2')
            else:
                print("–ó–∞–º–µ–Ω—è–µ–º PyQt5 –Ω–∞ PySide6==6.5.2")
                content = content.replace('PyQt5', 'PySide6==6.5.2')
            
            with open('requirements.txt', 'w', encoding='utf-8') as file:
                file.write(content)
            
            # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø —Ñ–∞–π–ª–∞
            with open('requirements.txt.bak', 'w', encoding='utf-8') as file:
                file.write(content)
            
            return True
    return False

def main():
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
    if len(sys.argv) > 1:
        base_path = sys.argv[1]
    else:
        base_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    
    print(f"–ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {base_path}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º requirements.txt
    if migrate_requirements():
        print("‚úÖ requirements.txt —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
    else:
        print("‚ö†Ô∏è requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç PyQt5")
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ Python —Ñ–∞–π–ª—ã
    python_files = find_python_files(base_path)
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(python_files)} Python —Ñ–∞–π–ª–æ–≤")
    
    files_with_import_changes = 0
    files_with_constant_changes = 0
    files_with_exec_changes = 0
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    for file_path in python_files:
        rel_path = os.path.relpath(file_path, base_path)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
        if update_import_statements(file_path):
            files_with_import_changes += 1
            print(f"üìÑ –û–±–Ω–æ–≤–ª–µ–Ω—ã –∏–º–ø–æ—Ä—Ç—ã –≤: {rel_path}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
        if update_constants(file_path):
            files_with_constant_changes += 1
            print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω—ã –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –≤: {rel_path}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º exec_() –Ω–∞ exec()
        if update_exec_to_exec_(file_path):
            files_with_exec_changes += 1
            print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω app.exec() –≤: {rel_path}")
    
    print("\n--- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏ ---")
    print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(python_files)}")
    print(f"–§–∞–π–ª–æ–≤ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –∏–º–ø–æ—Ä—Ç–æ–≤: {files_with_import_changes}")
    print(f"–§–∞–π–ª–æ–≤ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç: {files_with_constant_changes}")
    print(f"–§–∞–π–ª–æ–≤ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ exec_(): {files_with_exec_changes}")
    print("\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ü–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.")
    print("–û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ —É–¥–µ–ª–∏—Ç–µ —Ñ–∞–π–ª–∞–º, –≥–¥–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è QPainter, QFont, QMessageBox.")

if __name__ == "__main__":
    main() 