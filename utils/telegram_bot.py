"""
Telegram –±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ü–ü–°–î
–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –û–¢–ö –∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏–π
"""

import asyncio
import logging
from typing import Optional, List, Dict
from telegram import Bot
from telegram.error import TelegramError
from datetime import datetime
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Get Telegram bot token from environment variable
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

class PPSDTelegramBot:
    """Telegram –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ü–ü–°–î"""
    
    def __init__(self):
        self.bot_token = TELEGRAM_BOT_TOKEN
        self.chat_id = os.getenv('TELEGRAM_CHAT_ID')
        self.bot = None
        
        if self.bot_token:
            self.bot = Bot(token=self.bot_token)
        
        self.logger = logger
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.emojis = {
            'success': '‚úÖ',
            'error': '‚ùå',
            'warning': '‚ö†Ô∏è',
            'info': '‚ÑπÔ∏è',
            'material': 'üî©',
            'test': 'üß™',
            'qc': 'üîç',
            'approved': 'üëç',
            'rejected': 'üëé'
        }
    
    async def send_message(self, text: str, chat_id: Optional[str] = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        if not self.bot or not text:
            return False
        
        target_chat_id = chat_id or self.chat_id
        if not target_chat_id:
            self.logger.warning("–ù–µ —É–∫–∞–∑–∞–Ω chat_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return False
        
        try:
            await self.bot.send_message(
                chat_id=target_chat_id,
                text=text,
                parse_mode='HTML'
            )
            return True
        except TelegramError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
        except Exception as e:
            self.logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
            return False
    
    def format_material_info(self, material_data: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ç–µ—Ä–∏–∞–ª–µ"""
        return (
            f"{self.emojis['material']} <b>–ú–∞—Ç–µ—Ä–∏–∞–ª:</b> {material_data.get('grade', '–ù/–î')}\n"
            f"üì¶ <b>–ü–∞—Ä—Ç–∏—è:</b> {material_data.get('batch', '–ù/–î')}\n"
            f"üî• <b>–ü–ª–∞–≤–∫–∞:</b> {material_data.get('melt', '–ù/–î')}\n"
            f"üè¢ <b>–ü–æ—Å—Ç–∞–≤—â–∏–∫:</b> {material_data.get('supplier', '–ù/–î')}\n"
            f"üìÖ <b>–î–∞—Ç–∞:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )
    
    async def send_qc_approval(self, material_data: Dict, qc_operator: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –û–¢–ö"""
        message = (
            f"{self.emojis['success']} <b>–ú–ê–¢–ï–†–ò–ê–õ –û–î–û–ë–†–ï–ù –û–¢–ö</b>\n\n"
            f"{self.format_material_info(material_data)}\n\n"
            f"{self.emojis['qc']} <b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –û–¢–ö:</b> {qc_operator}\n"
            f"{self.emojis['approved']} <b>–°—Ç–∞—Ç—É—Å:</b> –û–¥–æ–±—Ä–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"
        )
        return await self.send_message(message)
    
    async def send_qc_rejection(self, material_data: Dict, qc_operator: str, defects: List[str]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –û–¢–ö —Å –∑–∞–º–µ—á–∞–Ω–∏—è–º–∏"""
        defects_text = "\n".join([f"‚Ä¢ {defect}" for defect in defects])
        
        message = (
            f"{self.emojis['error']} <b>–ú–ê–¢–ï–†–ò–ê–õ –û–¢–ö–õ–û–ù–ï–ù –û–¢–ö</b>\n\n"
            f"{self.format_material_info(material_data)}\n\n"
            f"{self.emojis['qc']} <b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –û–¢–ö:</b> {qc_operator}\n"
            f"{self.emojis['rejected']} <b>–°—Ç–∞—Ç—É—Å:</b> –û—Ç–∫–ª–æ–Ω–µ–Ω\n\n"
            f"<b>üîç –°–ø–∏—Å–æ–∫ –∑–∞–º–µ—á–∞–Ω–∏–π:</b>\n{defects_text}"
        )
        return await self.send_message(message)
    
    async def send_lab_test_failure(self, material_data: Dict, test_data: Dict, discrepancies: List[str]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±—Ä–∞–∫–µ –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –¶–ó–õ"""
        discrepancies_text = "\n".join([f"‚Ä¢ {disc}" for disc in discrepancies])
        
        message = (
            f"{self.emojis['error']} <b>–ë–†–ê–ö –õ–ê–ë–û–†–ê–¢–û–†–ò–ò –¶–ó–õ</b>\n\n"
            f"{self.format_material_info(material_data)}\n\n"
            f"{self.emojis['test']} <b>–¢–∏–ø –∏—Å–ø—ã—Ç–∞–Ω–∏—è:</b> {test_data.get('test_type', '–ù/–î')}\n"
            f"üî¨ <b>–û–±—Ä–∞–∑–µ—Ü:</b> {test_data.get('sample_code', '–ù/–î')}\n"
            f"üë®‚Äçüî¨ <b>–ò–Ω–∂–µ–Ω–µ—Ä –¶–ó–õ:</b> {test_data.get('engineer', '–ù/–î')}\n\n"
            f"<b>‚ö° –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è:</b>\n{discrepancies_text}"
        )
        return await self.send_message(message)
    
    async def send_final_acceptance(self, material_data: Dict, responsible_person: str, acceptance_type: str = "–ü–ü–°–î") -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–∏–µ–º–∫–µ"""
        message = (
            f"{self.emojis['success']} <b>–û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–ê–Ø –ü–†–ò–ï–ú–ö–ê {acceptance_type}</b>\n\n"
            f"{self.format_material_info(material_data)}\n\n"
            f"üë§ <b>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:</b> {responsible_person}\n"
            f"{self.emojis['approved']} <b>–°—Ç–∞—Ç—É—Å:</b> –ú–∞—Ç–µ—Ä–∏–∞–ª –ø—Ä–∏–Ω—è—Ç –≤ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é\n"
            f"üìã <b>–ó–∞–∫–ª—é—á–µ–Ω–∏–µ:</b> –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
        )
        return await self.send_message(message)
    
    async def send_urgent_notification(self, title: str, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ä–æ—á–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        formatted_message = (
            f"{self.emojis['warning']} <b>–°–†–û–ß–ù–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï</b>\n\n"
            f"<b>{title}</b>\n\n"
            f"{message}\n\n"
            f"üìÖ {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )
        return await self.send_message(formatted_message)
    
    async def send_status_change(self, material_data: Dict, old_status: str, new_status: str, changed_by: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞"""
        message = (
            f"{self.emojis['info']} <b>–ò–ó–ú–ï–ù–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê –ú–ê–¢–ï–†–ò–ê–õ–ê</b>\n\n"
            f"{self.format_material_info(material_data)}\n\n"
            f"üìä <b>–ë—ã–ª–æ:</b> {old_status}\n"
            f"üìä <b>–°—Ç–∞–ª–æ:</b> {new_status}\n"
            f"üë§ <b>–ò–∑–º–µ–Ω–∏–ª:</b> {changed_by}"
        )
        return await self.send_message(message)
    
    def send_message_sync(self, text: str, chat_id: Optional[str] = None) -> bool:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            loop = asyncio.get_event_loop()
            return loop.run_until_complete(self.send_message(text, chat_id))
        except RuntimeError:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ event loop, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            return asyncio.run(self.send_message(text, chat_id))
    
    def send_qc_approval_sync(self, material_data: Dict, qc_operator: str) -> bool:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è –û–¢–ö"""
        try:
            loop = asyncio.get_event_loop()
            return loop.run_until_complete(self.send_qc_approval(material_data, qc_operator))
        except RuntimeError:
            return asyncio.run(self.send_qc_approval(material_data, qc_operator))
    
    def send_qc_rejection_sync(self, material_data: Dict, qc_operator: str, defects: List[str]) -> bool:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –û–¢–ö"""
        try:
            loop = asyncio.get_event_loop()
            return loop.run_until_complete(self.send_qc_rejection(material_data, qc_operator, defects))
        except RuntimeError:
            return asyncio.run(self.send_qc_rejection(material_data, qc_operator, defects))
    
    def send_lab_test_failure_sync(self, material_data: Dict, test_data: Dict, discrepancies: List[str]) -> bool:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±—Ä–∞–∫–∞ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏"""
        try:
            loop = asyncio.get_event_loop()
            return loop.run_until_complete(self.send_lab_test_failure(material_data, test_data, discrepancies))
        except RuntimeError:
            return asyncio.run(self.send_lab_test_failure(material_data, test_data, discrepancies))
    
    def send_final_acceptance_sync(self, material_data: Dict, responsible_person: str, acceptance_type: str = "–ü–ü–°–î") -> bool:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
        event_loop = asyncio.new_event_loop()
        asyncio.set_event_loop(event_loop)
        try:
            return event_loop.run_until_complete(
                self.send_final_acceptance(material_data, responsible_person, acceptance_type)
            )
        finally:
            event_loop.close()

    def send_error_sync(self, error_message: str, error_details: str = None) -> bool:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        message = f"‚ö†Ô∏è –û–®–ò–ë–ö–ê: {error_message}"
        if error_details:
            message += f"\n\n–î–µ—Ç–∞–ª–∏: {error_details}"
        
        return self.send_message_sync(message)
    
    def send_system_event_sync(self, event_type: str, details: str = None) -> bool:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∏—Å—Ç–µ–º–Ω–æ–º —Å–æ–±—ã—Ç–∏–∏"""
        event_type_map = {
            "startup": "üü¢ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞",
            "shutdown": "üî¥ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
            "backup": "üíæ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ",
            "migration": "üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
            "error": "‚ö†Ô∏è –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞"
        }
        
        title = event_type_map.get(event_type, f"‚ÑπÔ∏è {event_type}")
        message = f"{title}"
        if details:
            message += f"\n\n{details}"
        
        return self.send_message_sync(message)
    
    def send_status_change_notification_sync(self, material_id: int, old_status: str, new_status: str, 
                                          changed_by: str) -> bool:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
        from models.models import MaterialStatus
        from utils.material_utils import get_status_display_name
        
        old_status_display = get_status_display_name(old_status)
        new_status_display = get_status_display_name(new_status)
        
        message = f"üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ #{material_id}\n\n"
        message += f"–°—Ç–∞—Ä—ã–π —Å—Ç–∞—Ç—É—Å: {old_status_display}\n"
        message += f"–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {new_status_display}\n"
        message += f"–ò–∑–º–µ–Ω–∏–ª: {changed_by}"
        
        return self.send_message_sync(message)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
telegram_bot = PPSDTelegramBot()

def send_qc_approval_notification(material_data: Dict, qc_operator: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –û–¢–ö"""
    return telegram_bot.send_qc_approval_sync(material_data, qc_operator)

def send_qc_rejection_notification(material_data: Dict, qc_operator: str, defects: List[str]) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–±—Ä–∞–∫–æ–≤–∫–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –û–¢–ö"""
    return telegram_bot.send_qc_rejection_sync(material_data, qc_operator, defects)

def send_lab_test_failure_notification(material_data: Dict, test_data: Dict, discrepancies: List[str]) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏–π"""
    return telegram_bot.send_lab_test_failure_sync(material_data, test_data, discrepancies)

def send_final_acceptance_notification(material_data: Dict, responsible_person: str, acceptance_type: str = "–ü–ü–°–î") -> bool:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
    return telegram_bot.send_final_acceptance_sync(material_data, responsible_person, acceptance_type)

def send_error_notification(error_message: str, error_details: str = None) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
    return telegram_bot.send_error_sync(error_message, error_details)

def send_system_event_notification(event_type: str, details: str = None) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∏—Å—Ç–µ–º–Ω–æ–º —Å–æ–±—ã—Ç–∏–∏"""
    return telegram_bot.send_system_event_sync(event_type, details)

def send_status_change_notification(material_id: int, old_status: str, new_status: str, changed_by: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
    return telegram_bot.send_status_change_notification_sync(material_id, old_status, new_status, changed_by)

# –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
def send_qc_approval_notification(material):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –û–¢–ö"""
    from database.connection import SessionLocal
    db = SessionLocal()
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        material_data = {
            "id": material.id,
            "material_grade": material.material_grade,
            "batch_number": material.batch_number,
            "melt_number": material.melt_number
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.query(User).filter(User.id == material.created_by_id).first()
        operator_name = user.full_name if user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        send_qc_approval_notification(material_data, operator_name)
    finally:
        db.close()

def send_qc_rejection_notification(material, comment=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –û–¢–ö"""
    material_data = {
        "id": material.id,
        "material_grade": material.material_grade,
        "batch_number": material.batch_number or "–ù–µ—Ç",
        "melt_number": material.melt_number
    }
    
    defects = ["–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"]
    if comment:
        defects.append(comment)
    
    send_qc_rejection_notification(material_data, "–ò–Ω—Å–ø–µ–∫—Ç–æ—Ä –û–¢–ö", defects)

def send_lab_test_failure_notification(material, comment=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏–π"""
    material_data = {
        "id": material.id,
        "material_grade": material.material_grade,
        "batch_number": material.batch_number or "–ù–µ—Ç",
        "melt_number": material.melt_number
    }
    
    test_data = {"test_type": "–•–∏–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑"}
    discrepancies = ["–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞"]
    if comment:
        discrepancies.append(comment)
    
    send_lab_test_failure_notification(material_data, test_data, discrepancies)

def send_final_acceptance_notification(material):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
    material_data = {
        "id": material.id,
        "material_grade": material.material_grade,
        "batch_number": material.batch_number or "–ù–µ—Ç",
        "melt_number": material.melt_number
    }
    
    send_final_acceptance_notification(material_data, "–ò–Ω—Å–ø–µ–∫—Ç–æ—Ä –¶–ó–õ") 