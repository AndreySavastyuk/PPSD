"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Telegram –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
"""
import os
import logging
from typing import List, Optional
from datetime import datetime

import telegram
from telegram import Bot
from telegram.error import TelegramError

from database.connection import SessionLocal
from models.models import User, MaterialEntry, MaterialStatus, UserRole

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

class NotificationService:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.telegram_bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.bot = None
        
        if self.telegram_bot_token:
            try:
                self.bot = Bot(token=self.telegram_bot_token)
                logger.info("Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞: {e}")
                self.bot = None
    
    def send_telegram_message(self, telegram_id: str, message: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram
        
        Args:
            telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Returns:
            True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        if not self.bot or not telegram_id:
            return False
        
        try:
            self.bot.send_message(chat_id=telegram_id, text=message, parse_mode='HTML')
            logger.info(f"Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
            return True
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    def notify_status_change(self, material_id: int, old_status: str, new_status: str):
        """
        –£–≤–µ–¥–æ–º–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        
        Args:
            material_id: ID –º–∞—Ç–µ—Ä–∏–∞–ª–∞
            old_status: –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å
            new_status: –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
        """
        db = SessionLocal()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç–µ—Ä–∏–∞–ª–µ
            material = db.query(MaterialEntry).filter(
                MaterialEntry.id == material_id
            ).first()
            
            if not material:
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–æ–≥–æ –Ω—É–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å
            notify_roles = []
            
            if new_status == MaterialStatus.QC_CHECK_PENDING.value:
                notify_roles = [UserRole.QC.value]
                message = f"üîî <b>–ù–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –û–¢–ö</b>\n\n" \
                         f"–ú–∞—Ä–∫–∞: {material.material_grade}\n" \
                         f"–ü–ª–∞–≤–∫–∞: {material.melt_number}\n" \
                         f"–ü–æ—Å—Ç–∞–≤—â–∏–∫: {material.supplier.name}"
            
            elif new_status == MaterialStatus.LAB_CHECK_PENDING.value:
                notify_roles = [UserRole.LAB.value]
                message = f"üî¨ <b>–ù–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏</b>\n\n" \
                         f"–ú–∞—Ä–∫–∞: {material.material_grade}\n" \
                         f"–ü–ª–∞–≤–∫–∞: {material.melt_number}\n" \
                         f"–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
            
            elif new_status == MaterialStatus.SAMPLES_REQUESTED.value:
                notify_roles = [UserRole.PRODUCTION.value]
                message = f"‚öôÔ∏è <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑—Ü–æ–≤</b>\n\n" \
                         f"–ú–∞—Ä–∫–∞: {material.material_grade}\n" \
                         f"–ü–ª–∞–≤–∫–∞: {material.melt_number}\n" \
                         f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø—Ä–æ—Å –≤ —Å–∏—Å—Ç–µ–º–µ"
            
            elif new_status == MaterialStatus.EDIT_REQUESTED.value:
                notify_roles = [UserRole.WAREHOUSE.value]
                message = f"‚úèÔ∏è <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞</b>\n\n" \
                         f"–ú–∞—Ä–∫–∞: {material.material_grade}\n" \
                         f"–ü–ª–∞–≤–∫–∞: {material.melt_number}\n" \
                         f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {material.edit_comment}"
            
            elif new_status in [MaterialStatus.APPROVED.value, MaterialStatus.REJECTED.value]:
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –ø—Ä–∏—á–∞—Å—Ç–Ω—ã—Ö
                notify_roles = [UserRole.WAREHOUSE.value, UserRole.QC.value]
                status_text = "‚úÖ –û–î–û–ë–†–ï–ù" if new_status == MaterialStatus.APPROVED.value else "‚ùå –û–¢–ö–õ–û–ù–ï–ù"
                message = f"<b>–ú–∞—Ç–µ—Ä–∏–∞–ª {status_text}</b>\n\n" \
                         f"–ú–∞—Ä–∫–∞: {material.material_grade}\n" \
                         f"–ü–ª–∞–≤–∫–∞: {material.melt_number}\n" \
                         f"–ü–∞—Ä—Ç–∏—è: {material.batch_number or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}"
            
            else:
                return  # –î–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            users_to_notify = db.query(User).filter(
                User.role.in_(notify_roles),
                User.telegram_id.isnot(None),
                User.is_active == True
            ).all()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            for user in users_to_notify:
                self.send_telegram_message(user.telegram_id, message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        finally:
            db.close()
    
    def notify_test_results(self, material_id: int, test_type: str, passed: bool):
        """
        –£–≤–µ–¥–æ–º–∏—Ç—å –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏–π
        
        Args:
            material_id: ID –º–∞—Ç–µ—Ä–∏–∞–ª–∞
            test_type: –¢–∏–ø –∏—Å–ø—ã—Ç–∞–Ω–∏—è
            passed: –†–µ–∑—É–ª—å—Ç–∞—Ç (True - –≥–æ–¥–µ–Ω, False - –±—Ä–∞–∫)
        """
        db = SessionLocal()
        try:
            material = db.query(MaterialEntry).filter(
                MaterialEntry.id == material_id
            ).first()
            
            if not material:
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏—Å–ø—ã—Ç–∞–Ω–∏—è
            test_type_names = {
                'mechanical': '–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è',
                'chemical': '–•–∏–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑',
                'metallographic': '–ú–µ—Ç–∞–ª–ª–æ–≥—Ä–∞—Ñ–∏—è'
            }
            test_name = test_type_names.get(test_type, test_type)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            result_text = "‚úÖ –ü–†–û–ô–î–ï–ù–´" if passed else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù–´"
            message = f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å–ø—ã—Ç–∞–Ω–∏–π</b>\n\n" \
                     f"–ú–∞—Ç–µ—Ä–∏–∞–ª: {material.material_grade}\n" \
                     f"–ü–ª–∞–≤–∫–∞: {material.melt_number}\n" \
                     f"–ò—Å–ø—ã—Ç–∞–Ω–∏–µ: {test_name}\n" \
                     f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result_text}"
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –û–¢–ö –∏ —Å–∫–ª–∞–¥
            users_to_notify = db.query(User).filter(
                User.role.in_([UserRole.QC.value, UserRole.WAREHOUSE.value]),
                User.telegram_id.isnot(None),
                User.is_active == True
            ).all()
            
            for user in users_to_notify:
                self.send_telegram_message(user.telegram_id, message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö: {e}")
        finally:
            db.close()
    
    def send_daily_summary(self):
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        """
        db = SessionLocal()
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –¥–µ–Ω—å
            today = datetime.now().date()
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            status_counts = {}
            for status in MaterialStatus:
                count = db.query(MaterialEntry).filter(
                    MaterialEntry.status == status.value,
                    MaterialEntry.is_deleted == False
                ).count()
                if count > 0:
                    status_counts[status.value] = count
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = f"üìà <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –Ω–∞ {today.strftime('%d.%m.%Y')}</b>\n\n"
            
            if status_counts:
                message += "üì¶ <b>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:</b>\n"
                for status, count in status_counts.items():
                    status_name = self._get_status_name(status)
                    message += f"‚Ä¢ {status_name}: {count}\n"
            else:
                message += "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ\n"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            admins = db.query(User).filter(
                User.role == UserRole.ADMIN.value,
                User.telegram_id.isnot(None),
                User.is_active == True
            ).all()
            
            for admin in admins:
                self.send_telegram_message(admin.telegram_id, message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏: {e}")
        finally:
            db.close()
    
    def _get_status_name(self, status_code: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —Å—Ç–∞—Ç—É—Å–∞"""
        status_names = {
            MaterialStatus.RECEIVED.value: "–ü–æ–ª—É—á–µ–Ω –Ω–∞ —Å–∫–ª–∞–¥",
            MaterialStatus.QC_CHECK_PENDING.value: "–û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –û–¢–ö",
            MaterialStatus.QC_CHECKED.value: "–ü—Ä–æ–≤–µ—Ä–µ–Ω –û–¢–ö",
            MaterialStatus.LAB_CHECK_PENDING.value: "–û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –¶–ó–õ",
            MaterialStatus.SAMPLES_REQUESTED.value: "–ó–∞–ø—Ä–æ—à–µ–Ω—ã –ø—Ä–æ–±—ã",
            MaterialStatus.SAMPLES_COLLECTED.value: "–ü—Ä–æ–±—ã –æ—Ç–æ–±—Ä–∞–Ω—ã",
            MaterialStatus.TESTING.value: "–ù–∞ –∏—Å–ø—ã—Ç–∞–Ω–∏—è—Ö",
            MaterialStatus.TESTING_COMPLETED.value: "–ò—Å–ø—ã—Ç–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã",
            MaterialStatus.APPROVED.value: "–û–¥–æ–±—Ä–µ–Ω",
            MaterialStatus.REJECTED.value: "–û—Ç–∫–ª–æ–Ω–µ–Ω",
            MaterialStatus.ARCHIVED.value: "–í –∞—Ä—Ö–∏–≤–µ",
            MaterialStatus.EDIT_REQUESTED.value: "–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
        }
        return status_names.get(status_code, status_code)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
notification_service = NotificationService() 